package i18n

import (
	"fmt"
	. "github.com/dave/jennifer/jen"
	"github.com/worldiety/tools"
	"golang.org/x/text/language"
	"os"
	"path/filepath"
	"strings"
)

const stringsPrefix = "strings"
const stringsPostfix = ".xml"

type resourceFile struct {
	filename string
	values   *Resources
}

type packageTranslation struct {
	pkg   *tools.Package
	files []resourceFile
}

func (t *packageTranslation) Emit() error {
	file := NewFile(t.pkg.Name)
	file.HeaderComment("Code generated by go generate; DO NOT EDIT.")
	file.HeaderComment("This file was generated by github.com/worldiety/i18n")

	file.Func().Id("init").Params().BlockFunc(func(group *Group) {
		group.Var().Id("tag").String()
		for _, resFile := range t.files {
			group.Line()
			group.Comment("from " + filepath.Base(resFile.filename))
			group.Id("tag").Op("=").Lit(resFile.values.tag.String())
			group.Line()
			for _, val := range resFile.values.values {
				val.emit(group)
			}
		}
		group.Line()

	})

	fmt.Println(file.GoString())
	return nil
}

type goGenerator struct {
	dir          string
	pgk          *tools.Package
	translations []*packageTranslation
}

func NewGoGenerator(dir string) *goGenerator {
	return &goGenerator{dir: dir}
}

// Scan identifies all available package translations
func (g *goGenerator) Scan() error {
	pkg, err := tools.GoList(g.dir, true)
	if err != nil {
		return fmt.Errorf("%s is not a module: %w", g.dir, err)
	}
	g.pgk = pkg

	return g.scanCandidates(pkg)
}

func (g *goGenerator) scanCandidates(root *tools.Package) error {
	importer := AndroidImporter{}

	var androidTranslationFiles []resourceFile
	for _, file := range root.ListFiles() {
		fname := filepath.Base(file)
		if strings.HasPrefix(fname, stringsPrefix) && strings.HasSuffix(fname, stringsPostfix) {
			localeName := fname[len(stringsPrefix) : len(fname)-len(stringsPostfix)]
			tag := language.Make(localeName)
			res := newResources(tag)
			reader, err := os.Open(file)
			if err != nil {
				return fmt.Errorf("unable to open %s: %w", file, err)
			}
			err = importer.Import(res, reader)
			_ = reader.Close()
			if err != nil {
				return fmt.Errorf("unable to import %s: %w", file, err)
			}
			androidTranslationFiles = append(androidTranslationFiles, resourceFile{
				filename: file,
				values:   res,
			})
		}
	}
	if len(androidTranslationFiles) > 0 {
		g.translations = append(g.translations, &packageTranslation{
			pkg:   root,
			files: androidTranslationFiles,
		})
	}

	for _, child := range root.Packages {
		err := g.scanCandidates(child)
		if err != nil {
			return err
		}
	}
	return nil
}

func (g *goGenerator) Emit() error {
	for _, translation := range g.translations {
		err := translation.Emit()
		if err != nil {
			return err
		}
	}
	return nil
}
